//
//  HomeViewController.swift
//  SafeBoda
//
//  Created by Jalal on 9/22/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject
{
    func displaySearchResults(viewModel: Home.CreateSearchAction.ViewModel)
}

class HomeViewController: MainViewController, HomeDisplayLogic {
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        self.searchTextField.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        UIApplication.shared.statusBarStyle = UIStatusBarStyle.darkContent
        self.renderUIComponents()
    }
    
    //MARK: - receive events from UI
    
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var searchButton: UIButton!
    @IBOutlet weak var hintLabel: UILabel!
    @IBOutlet weak var searchLoader: UIActivityIndicatorView!

    @IBAction func searchButtonTapped(_ sender: Any) {
        if !(searchTextField.text?.isEmpty ?? true) {
            self.searchButton.setTitle("", for: .normal)
            self.searchLoader.isHidden = false
            self.searchLoader.startAnimating()
            doSearch()
        }
    }
    
    func renderUIComponents() {
        self.hintLabel.text = "HOME_HINT_SEARCH_TEXT".localized
        self.hintLabel.font = Fonts.small
        //
        self.searchTextField.becomeFirstResponder()
        //
        self.searchButton.setTitle("SEARCH_BUTTON_TITLE".localized, for: .normal)
        self.searchButton.setTitleColor(Colors.white, for: .normal)
        self.searchButton.backgroundColor = Colors.mainColor
        self.searchButton.titleLabel?.font = Fonts.big
        self.searchButton.layer.cornerRadius = 8
        self.searchTextField.layer.borderColor = Colors.mainColor.cgColor
        //
        self.searchLoader.isHidden = true
    }
    
    // MARK: - request data from HomeInteractor

    func doSearch() {
        // get text from search field
        let txt = self.searchTextField.text ?? ""
        // set text in data layer
        let data = Home.SearchFormFields(name: txt)
        // create request to add some pramaters
        let request = Home.CreateSearchAction.Request(searchFormFields: data)
        // call view model to do our search
        interactor?.doSearch(request: request)
    }
    
    
    // MARK: - display view model from HomePresenter

    func displaySearchResults(viewModel: Home.CreateSearchAction.ViewModel) {
        // go to personal details screen
        self.searchLoader.isHidden = true
        self.searchButton.setTitle("SEARCH_BUTTON_TITLE".localized, for: .normal)
        let user = DataStore.shared.me
        if let _ = user?.id {
            router?.routeToPersonalInfo(segue: nil)
        } else {
            
        }
        
    }

    
}

extension HomeViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if !(searchTextField.text?.isEmpty ?? true) {
            self.searchButton.setTitle("", for: .normal)
            self.searchLoader.isHidden = false
            self.searchLoader.startAnimating()
            doSearch()
            return true
        }
        return false
    }
}
