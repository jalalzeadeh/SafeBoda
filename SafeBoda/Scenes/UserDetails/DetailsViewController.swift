//
//  DetailsViewController.swift
//  SafeBoda
//
//  Created by Jalal on 9/22/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage

protocol DetailsDisplayLogic: AnyObject
{
    func displayUserInfo(viewModel: Details.GetUser.ViewModel)
//    func displaySomethingElse(viewModel: Details.SomethingElse.ViewModel)
}

class DetailsViewController: MainViewController, DetailsDisplayLogic {
    var interactor: DetailsBusinessLogic?
    var router: (NSObjectProtocol & DetailsRoutingLogic & DetailsDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let interactor = DetailsInteractor()
        let presenter = DetailsPresenter()
        let router = DetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
//        doSomethingElse()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        // status bar
        UIApplication.shared.statusBarStyle = UIStatusBarStyle.lightContent
        self.renderUIComponents()
        getUser()
    }
    
    //MARK: - receive events from UI
    // top info
    @IBOutlet weak var topView: UIView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var emailLabel: UILabel!
    @IBOutlet weak var image: UIImageView!
    // poup view info
    @IBOutlet weak var numbersView: UIView!
    @IBOutlet weak var followingImg: UIImageView!
    @IBOutlet weak var followersImg: UIImageView!
    @IBOutlet weak var reposImg: UIImageView!
    @IBOutlet weak var followingTitleLabel: UILabel!
    @IBOutlet weak var followingValueLabel: UILabel!
    @IBOutlet weak var followersTitleLabel: UILabel!
    @IBOutlet weak var followersValueLabel: UILabel!
    @IBOutlet weak var reposTitleLabel: UILabel!
    @IBOutlet weak var reposValueLabel: UILabel!
    // logout button
    @IBOutlet weak var logoutButton: UIButton!
    // more details
    @IBOutlet weak var companyLabel: UILabel!
    @IBOutlet weak var companyValueLabel: UILabel!
    @IBOutlet weak var locationLabel: UILabel!
    @IBOutlet weak var locationValueLabel: UILabel!
    @IBOutlet weak var bioLabel: UILabel!
    @IBOutlet weak var bioValueLabel: UILabel!
    
    
    @IBAction func followingButtonTapped(_ sender: Any) {
        // go to following list screen
        router?.routeToFollowing(segue: nil)
    }

    @IBAction func followersButtonTapped(_ sender: Any) {
        // go to followers list screen
        router?.routeToFollowers(segue: nil)
    }
    
    @IBAction func logoutButtonAction(_ sender: Any) {
        DataStore.shared.logout()
        self.navigationController?.dismiss(animated: true, completion: nil)
    }
    
    func renderUIComponents() {
        // setup navigation theme
        navigationController?.navigationBar.barTintColor = Colors.mainColor
        navigationController?.navigationBar.backgroundColor = Colors.clear
        navigationController?.navigationBar.isTranslucent = false
        navigationController?.navigationBar.titleTextAttributes = [.foregroundColor: Colors.white]
        self.navigationController?.navigationBar.setBackgroundImage(nil, for: UIBarMetrics.default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.title = "USER_PROFILE_TITLE".localized
        self.navigationController?.navigationBar.layoutIfNeeded()
        // top info
        self.topView.backgroundColor = Colors.mainColor
        self.nameLabel.textColor = Colors.white
        self.emailLabel.textColor = Colors.white
        self.image.layer.cornerRadius = 74 / 2 // height of image / 2 and it's circle
        // numbers poup view with shadow
        self.numbersView.backgroundColor = Colors.white
        self.numbersView.layer.cornerRadius = 12
        self.numbersView.layer.shadowColor = UIColor.black.cgColor
        self.numbersView.layer.shadowOpacity = 0.3
        self.numbersView.layer.shadowOffset = .zero
        self.numbersView.layer.shadowRadius = 4
        // numbers info
        self.followingTitleLabel.text = "FOLLOWING".localized
        self.followingTitleLabel.font = Fonts.small
        self.followingValueLabel.font = Fonts.xBig
        self.followingTitleLabel.textColor = Colors.secondColor
        self.followingValueLabel.textColor = Colors.mainColor
        self.followersTitleLabel.text = "FOLLOWERS".localized
        self.followersTitleLabel.font = Fonts.small
        self.followersValueLabel.font = Fonts.xBig
        self.followersTitleLabel.textColor = Colors.secondColor
        self.followersValueLabel.textColor = Colors.mainColor
        self.reposTitleLabel.text = "REPOS"
        self.reposTitleLabel.font = Fonts.small
        self.reposValueLabel.font = Fonts.xBig
        self.reposTitleLabel.textColor = Colors.secondColor
        self.reposValueLabel.textColor = Colors.mainColor
        // logout button
        self.logoutButton.setTitle("LOGOUT".localized, for: .normal)
        self.logoutButton.titleLabel?.font = Fonts.small
        self.logoutButton.setTitleColor(Colors.white, for: .normal)
        // More info
        self.companyLabel.text = "DETAILS_SCREEN_COMPANY".localized
        self.bioLabel.text = "DETAILS_SCREEN_BIO".localized
        self.locationLabel.text = "DETAILS_SCREEN_LOCATION".localized
        self.companyLabel.font = Fonts.small
        self.bioLabel.font = Fonts.small
        self.locationLabel.font = Fonts.small
        self.companyValueLabel.font = Fonts.small
        self.bioValueLabel.font = Fonts.small
        self.locationValueLabel.font = Fonts.small
        self.companyValueLabel.textColor = Colors.grayField
        self.bioValueLabel.textColor = Colors.grayField
        self.locationValueLabel.textColor = Colors.grayField
        
    }
    
    func getUser()
    {
      let request = Details.GetUser.Request()
      interactor?.getUser(request: request)
    }
    
    
    // MARK: - request data from DetailsInteractor

//    func doSomething() {
//        let request = Details.Something.Request()
//       // interactor?.doSomething(request: request)
//    }
//
//    func doSomethingElse() {
//        let request = Details.SomethingElse.Request()
//        interactor?.doSomethingElse(request: request)
//    }

    // MARK: - display view model from DetailsPresenter

    func displayUserInfo(viewModel: Details.GetUser.ViewModel) {
        //nameTextField.text = viewModel.name
        self.nameLabel.text = viewModel.user?.name ?? "-"
        self.locationValueLabel.text = viewModel.user?.location ?? "-"
        self.bioValueLabel.text = viewModel.user?.bio ?? "-"
        self.companyValueLabel.text = viewModel.user?.company ?? "-"
        self.followingValueLabel.text = "\(viewModel.user?.following ?? 0)"
        self.followersValueLabel.text = "\(viewModel.user?.followers  ?? 0)"
        self.reposValueLabel.text = "\(viewModel.user?.repos  ?? 0)"
        self.emailLabel.text = (viewModel.user?.email ?? "").isEmpty ? viewModel.user?.login ?? "" : viewModel.user?.email ?? ""
        if let url = URL(string: viewModel.user?.avatarUrl ?? "") {
            self.image.sd_setImage(with: url) { img, errpr, type, url in
               // self.image.layer
            }
        }
        
        
    }
//
//    func displaySomethingElse(viewModel: Details.SomethingElse.ViewModel) {
//        // do sometingElse with viewModel
//    }
}
